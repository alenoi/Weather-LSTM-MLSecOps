# Weather-LSTM-MLSecOps/docker-compose.yml

x-build-common: &build-common
  args:
    PYTHONUNBUFFERED: "1"

services:
  mlflow:
    build:
      context: docker/mlflow
      dockerfile: Dockerfile
      <<: *build-common
    ports:
      - 5000:5000
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      <<: *build-common
    env_file: .env
    environment:
      - PYTHONPATH=/app/src
    working_dir: /app/src
    depends_on:
      mlflow:
        condition: service_healthy
    ports:
      - "${API_PORT}:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - .:/app
    command: uvicorn src.api.app:app --host 0.0.0.0 --port 8080 --reload

  monitor:
    build:
      context: .
      dockerfile: docker/monitor/Dockerfile
      <<: *build-common
    env_file: .env
    environment:
      - PYTHONPATH=/app/src
    working_dir: /app/src
    depends_on:
      mlflow:
        condition: service_started
    ports:
      - 8501:8501
    restart: unless-stopped
    volumes:
      - .:/app
    command: streamlit run src/monitor/monitor.py

  airflow:
    image: apache/airflow:2.8.1-python3.9
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=sqlite:////usr/local/airflow/airflow.db
      - AIRFLOW__WEBSERVER__SECRET_KEY=your-secret-key
      - AIRFLOW__WEBSERVER__RBAC=True
      - AIRFLOW__CORE__FERNET_KEY=your-fernet-key
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
    ports:
      - "8085:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - .:/app
    command: >
      bash -c "airflow db upgrade &&
               airflow users create --username admin --password admin --firstname Tomi --lastname Teszt --role Admin --email admin@admin.local &&
               airflow scheduler & airflow webserver"
    depends_on:
      - mlflow

  notebook:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      <<: *build-common
    env_file: .env
    depends_on:
      mlflow:
        condition: service_healthy
    ports:
      - 8888:8888
    volumes:
      - .:/home/jovyan/work
    command: >
      conda run -n mlsecops jupyter notebook
      --ip=0.0.0.0 --no-browser --allow-root --NotebookApp.token=''
    restart: unless-stopped
    profiles:
      - dev

volumes:
  mlflow_artifacts:
